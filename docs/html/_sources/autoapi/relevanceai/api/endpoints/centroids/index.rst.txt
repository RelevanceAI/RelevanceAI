:py:mod:`relevanceai.api.endpoints.centroids`
=============================================

.. py:module:: relevanceai.api.endpoints.centroids


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   relevanceai.api.endpoints.centroids.CentroidsClient




.. py:class:: CentroidsClient(project, api_key)

   Bases: :py:obj:`relevanceai.base._Base`

   Base class for all relevanceai client utilities

   .. py:attribute:: docs_closest_to_center
      

      

   .. py:attribute:: docs_furthest_from_center
      

      

   .. py:method:: list(self, dataset_id: str, vector_fields: List, alias: str = 'default', page_size: int = 5, cursor: str = None, include_vector: bool = False, base_url='https://gateway-api-aueast.relevance.ai/latest')

      Retrieve the cluster centroid

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_fields: The vector field where a clustering task was run.
      :type vector_fields: list
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param page_size: Size of each page of results
      :type page_size: int
      :param cursor: Cursor to paginate the document retrieval
      :type cursor: string
      :param include_vector: Include vectors in the search results
      :type include_vector: bool


   .. py:method:: get(self, dataset_id: str, cluster_ids: List, vector_fields: List, alias: str = 'default', page_size: int = 5, cursor: str = None)

      Retrieve the cluster centroids by IDs

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param cluster_ids: List of cluster IDs
      :type cluster_ids: list
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param page_size: Size of each page of results
      :type page_size: int
      :param cursor: Cursor to paginate the document retrieval
      :type cursor: string


   .. py:method:: insert(self, dataset_id: str, cluster_centers: List, vector_fields: List, alias: str = 'default')

      Insert your own cluster centroids for it to be used in approximate search settings and cluster aggregations.
      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param cluster_centers: Cluster centers with the key being the index number
      :type cluster_centers: list
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string


   .. py:method:: documents(self, dataset_id: str, cluster_ids: List, vector_fields: List, alias: str = 'default', page_size: int = 5, cursor: str = None, page: int = 1, include_vector: bool = False, similarity_metric: str = 'cosine')

      Retrieve the cluster centroids by IDs

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param cluster_ids: List of cluster IDs
      :type cluster_ids: list
      :param vector_fields: The vector field where a clustering task was run.
      :type vector_fields: list
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param page_size: Size of each page of results
      :type page_size: int
      :param cursor: Cursor to paginate the document retrieval
      :type cursor: string
      :param page: Page of the results
      :type page: int
      :param include_vector: Include vectors in the search results
      :type include_vector: bool
      :param similarity_metric: Similarity Metric, choose from ['cosine', 'l1', 'l2', 'dp']
      :type similarity_metric: string


   .. py:method:: metadata(self, dataset_id: str, vector_fields: List, alias: str = 'default', metadata: Optional[Dict[str, Any]] = None)

      If metadata is none, retrieves metadata about a dataset. notably description, data source, etc
      Otherwise, you can store the metadata about your cluster here.

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param metadata: If None, it will retrieve the metadata, otherwise
                       it will overwrite the metadata of the cluster
      :type metadata: Optional[dict]


   .. py:method:: list_closest_to_center(self, dataset_id: str, vector_fields: List, cluster_ids: List = [], alias: str = 'default', centroid_vector_fields: List = ['centroid_vector_'], select_fields: List = [], approx: int = 0, sum_fields: bool = True, page_size: int = 1, page: int = 1, similarity_metric: str = 'cosine', filters: List = [], facets: List = [], min_score: int = 0, include_vector: bool = False, include_count: bool = True, include_facets: bool = False)

      List of documents closest from the centre.

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param cluster_ids: Any of the cluster ids
      :type cluster_ids: lsit
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param centroid_vector_fields: Vector fields stored
      :type centroid_vector_fields: list
      :param select_fields: Fields to include in the search results, empty array/list means all fields
      :type select_fields: list
      :param approx: Used for approximate search to speed up search. The higher the number, faster the search but potentially less accurate
      :type approx: int
      :param sum_fields: Whether to sum the multiple vectors similarity search score as 1 or seperate
      :type sum_fields: bool
      :param page_size: Size of each page of results
      :type page_size: int
      :param page: Page of the results
      :type page: int
      :param similarity_metric: Similarity Metric, choose from ['cosine', 'l1', 'l2', 'dp']
      :type similarity_metric: string
      :param filters: Query for filtering the search results
      :type filters: list
      :param facets: Fields to include in the facets, if [] then all
      :type facets: list
      :param min_score: Minimum score for similarity metric
      :type min_score: int
      :param include_vectors: Include vectors in the search results
      :type include_vectors: bool
      :param include_count: Include the total count of results in the search results
      :type include_count: bool
      :param include_facets: Include facets in the search results
      :type include_facets: bool


   .. py:method:: list_furthest_from_center(self, dataset_id: str, vector_fields: str, cluster_ids: List = [], alias: str = 'default', select_fields: List = [], approx: int = 0, sum_fields: bool = True, page_size: int = 1, page: int = 1, similarity_metric: str = 'cosine', filters: List = [], facets: List = [], min_score: int = 0, include_vector: bool = False, include_count: bool = True, include_facets: bool = False)

      List of documents furthest from the centre.

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_fields: The vector field where a clustering task was run.
      :type vector_fields: list
      :param cluster_ids: Any of the cluster ids
      :type cluster_ids: list
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param select_fields: Fields to include in the search results, empty array/list means all fields
      :type select_fields: list
      :param approx: Used for approximate search to speed up search. The higher the number, faster the search but potentially less accurate
      :type approx: int
      :param sum_fields: Whether to sum the multiple vectors similarity search score as 1 or seperate
      :type sum_fields: bool
      :param page_size: Size of each page of results
      :type page_size: int
      :param page: Page of the results
      :type page: int
      :param similarity_metric: Similarity Metric, choose from ['cosine', 'l1', 'l2', 'dp']
      :type similarity_metric: string
      :param filters: Query for filtering the search results
      :type filters: list
      :param facets: Fields to include in the facets, if [] then all
      :type facets: list
      :param min_score: Minimum score for similarity metric
      :type min_score: int
      :param include_vectors: Include vectors in the search results
      :type include_vectors: bool
      :param include_count: Include the total count of results in the search results
      :type include_count: bool
      :param include_facets: Include facets in the search results
      :type include_facets: bool


   .. py:method:: delete(self, dataset_id: str, vector_fields: List, alias: str = 'default')

      Delete centroids by dataset ID, vector field and alias

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: string
      :param alias: Alias is used to name a cluster
      :type alias: string


   .. py:method:: update(self, dataset_id: str, vector_fields: List, id: str, update: dict = {}, alias: str = 'default')

      Delete centroids by dataset ID, vector field and alias

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param vector_field: The vector field where a clustering task was run.
      :type vector_field: List
      :param alias: Alias is used to name a cluster
      :type alias: string
      :param id: The centroid ID
      :type id: string
      :param update: The update to be applied to the document
      :type update: dict



