:py:mod:`relevanceai.api.endpoints.wordclouds`
==============================================

.. py:module:: relevanceai.api.endpoints.wordclouds

.. autoapi-nested-parse::

   Wordclouds services



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   relevanceai.api.endpoints.wordclouds.WordcloudsClient




.. py:class:: WordcloudsClient(project, api_key)

   Bases: :py:obj:`relevanceai.base._Base`

   Base class for all relevanceai client utilities

   .. py:method:: wordclouds(self, dataset_id: str, fields: list, n: int = 2, most_common: int = 5, page_size: int = 20, select_fields: list = [], include_vector: bool = False, filters: list = [], additional_stopwords: list = [])

      Get frequency n-gram frequency counter from the wordcloud.

      :param dataset_id: Unique name of dataset
      :type dataset_id: string
      :param fields: The field on which to build NGrams
      :type fields: list
      :param n: The number of words fo combine
      :type n: int
      :param most_common: The most common number of n-gram terms
      :type most_common: int
      :param page_size: Size of each page of results
      :type page_size: int
      :param select_fields: Fields to include in the search results, empty array/list means all fields.
      :type select_fields: list
      :param include_vector: Include vectors in the search results
      :type include_vector: bool
      :param filters: Query for filtering the search results
      :type filters: list
      :param additional_stopwords: Additional stopwords to add
      :type additional_stopwords: list



