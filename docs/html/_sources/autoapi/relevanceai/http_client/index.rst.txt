:py:mod:`relevanceai.http_client`
=================================

.. py:module:: relevanceai.http_client

.. autoapi-nested-parse::

   access the client via this class



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   relevanceai.http_client.Client



Functions
~~~~~~~~~

.. autoapisummary::

   relevanceai.http_client.str2bool



Attributes
~~~~~~~~~~

.. autoapisummary::

   relevanceai.http_client.vis_requirements
   relevanceai.http_client.vis_requirements


.. py:data:: vis_requirements
   :annotation: = False

   

.. py:data:: vis_requirements
   :annotation: = True

   

.. py:function:: str2bool(v)


.. py:class:: Client(project=os.getenv('RELEVANCE_PROJECT'), api_key=os.getenv('RELEVANCE_API_KEY'), authenticate: bool = False)

   Bases: :py:obj:`relevanceai.api.client.BatchAPIClient`, :py:obj:`doc_utils.doc_utils.DocUtils`

   Python Client for Relevance AI's relevanceai

   .. py:attribute:: FAIL_MESSAGE
      :annotation: = Your API key is invalid. Please login again

      

   .. py:attribute:: _cred_fn
      :annotation: = .creds.json

      

   .. py:method:: base_url(self)
      :property:


   .. py:method:: base_ingest_url(self)
      :property:


   .. py:method:: _token_to_auth(self)


   .. py:method:: _write_credentials(self, project, api_key)


   .. py:method:: _read_credentials(self)


   .. py:method:: login(self, authenticate: bool = True)

      Preferred login method for demos and interactive usage.


   .. py:method:: auth_header(self)
      :property:


   .. py:method:: make_search_suggestion(self)


   .. py:method:: check_auth(self)



